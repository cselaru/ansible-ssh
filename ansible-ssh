#!/bin/bash

# Set this to false to disable printing configuration variables before connecting
debug=false

# Source the user profile variables
. /home/$USER/ansible-ssh.config

for program in ansible-config ansible-inventory jq; do
    type "$program" > /dev/null || { echo "ERROR: not found: $program"; exit 1; }
done

# Optional -i flag processing
if [ "$1" == "-i" ]; then
    shift
    inventory_arg="-i $1"
    shift
else
    inventory_arg=""
fi

if [ $# -eq 0 ]; then
    echo "Usage: $(basename $0) [-i INVENTORY] hostname"
    echo
    echo "Using -i before the hostname passes the -i INVENTORY argument to ansible-inventory to retrieve the host."
    echo
    echo "Avaliable hosts:"
    # jq magic: https://stedolan.github.io/jq/manual/
    # .[] array/object value iterator
    # | combines two filters feeding output of left one into input of right one
    # .hosts? produces content of hosts key, no error if it does not exist
    # .[]? array/object value iterator, no error if output of . is not array or object (for example, it is null)
    ansible-inventory $inventory_arg --list | jq '.[] | .hosts? | .[]? ' | sort | uniq
    exit 1
fi

ssh_executable=$(ansible-config dump | grep '^ANSIBLE_SSH_EXECUTABLE' | cut -d'=' -f2-)
$debug && echo "ssh_executable: $ssh_executable"

host="$1"
# All other arguments are ssh arguments
shift

inventory=$(ansible-inventory $inventory_arg --host "$host")
if [ $? -ne 0 ]; then
    echo "ERROR: ansible inventory failed to gather info on $host"
    exit 1
fi

# As of ansible 2.0, new style options like ansible_host override old style ansible_ssh_*
ansible_ssh_host=$(echo "$inventory" | jq ".ansible_ssh_host?" | grep -v '^null$' | tr -d \")
ansible_host=$(echo "$inventory" | jq ".ansible_host?" | grep -v '^null$' | tr -d \")
# Assign new value if variable is not set or empty
ansible_host="${ansible_host:-$ansible_ssh_host}"
ansible_host="${ansible_host:-$host}"
$debug && echo "ansible_host: $ansible_host"

if [ "$use_jumphost" == "Y" ]; then
    $debug && echo result command: ${ssh_executable} -J $ans_usr@$ans_jumphost:22 $ans_usr@${ansible_host} $@
    exec ${ssh_executable} -J $ans_usr@$ans_jumphost:22 $ans_usr@${ansible_host} $@
    else
    $debug && echo result command: ${ssh_executable} $ans_usr@${ansible_host} $@
    exec ${ssh_executable} $ans_usr@${ansible_host} $@
fi
